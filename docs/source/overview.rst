System Overview
================

Plant IT is a web app that simplifies performing a task in parallel across
many experimental samples. It takes care of copying files to and from
file systems and running the jobs on high performance computing clusters (HPCs).

Workflows
----------

Workflows are pre-packaged analysis pipelines that can be applied to a
set of experimental samples in parallel. Workflows set up as modular
plugins that Plant IT loads at start up.

A major goal of Plant IT is to make it easy for developers to add their own
pipelines to Plant IT. This is done using the
`workflow cookiecutter template <https://github.com/Computational-Plant-Science/cookiecutter_PlantIT>`_.

See the `template documentation` for more details on workflows and developing
new workflows https://plant-it-workflows.readthedocs.io/en/latest/.

For information on installing workflows in Plant IT, see
:ref:`configuration-installing-workflows`.

Collections and Samples
------------------------

Collections are a set of experimental samples that are analyzed by workflows.

Sample
^^^^^^^^
The individual unit fed into a Plant IT workflow. What is
contained in a sample is dependent on the workflow that will analyze
the sample. For example, a sample may be an individual image, a
folder containing slices from 3D imaging, or a csv file containing
points for a cloud map.

Plant IT makes no assumptions about what a sample is. Sample format
is defined by the workflow that will analyze it.

Collection
^^^^^^^^^^^
A set of samples related in some way that will be
analyzed by the *same* workflow.

For example, all the roots collected in an experiment may go into
one collection, as they will all be analyzed by the same
downstream workflow.

Systems
--------

Front End
^^^^^^^^^^

The front end is built as a single page app using `Vue.js <https://vuejs.org/>`_,
with `npm <https://www.npmjs.com/>` utilized for package management and building.

The root directory for the front end is `django/front_end`. The website
can be built using:

.. code-block:: bash

  cd django/front_end
  npm run build

npm builds into `django/front_end/dist/`, which is configured as a `static
directory <https://docs.djangoproject.com/en/2.2/howto/static-files/>`_ in
django.

URLs
""""

The Vue app is loaded through django via the `django/front_end/dist/index.html`
file generated by `npm run build`.

With the exception of the url paths listed in `django/urls.py`,
all paths are routed through Vue.js via the vue.js router
(`django/front_end/src/router.js`)

.. Attention::
  All url paths require a trailing slash:

  Example:

    This works: `http://localhost/admin/`

    This will not work: `http://localhost/admin`

Admin Interface
""""""""""""""""

The django admin interface is available at `http://localhost/admin/` .


Backend
^^^^^^^

The back end is written in `django <https://www.djangoproject.com/>`_ and
consists of the following packages:

Job Manager (:mod:`plantit.job_manager`)
""""""""""""""""""""""""""""""""""""""""""

The job manager provides a system for running ordered tasks asynchronously on
the server side. Tasks are run on a celery task queue. This queue is run inside
the celery docker container.

The job manager’s main purpose it to submit workflow runs to a cluster.
However, can be used for any collection of ordered task that need run
asynchronously with respect to the web server.

Workflows (:mod:`plantit.workflows`)
""""""""""""""""""""""""""""""""""""""

Workflows are modular code provided by 3rd parties to analyze samples within
collections. Plant IT automatically applies the workflow’s analysis code to all
samples withing a collection.

File Manager (:mod:`plantit.file_manager`)
""""""""""""""""""""""""""""""""""""""""""

The file manager handles interactions with a modular filesystems system to
open connections with file servers that hold the files that make up a Sample.

Collection (:mod:`plantit.collection`)
"""""""""""""""""""""""""""""""""""""""

The collections module contains information and logic related to the data
users want to analyze using a Plant IT workflow.

File Locations
---------------

.. code-block:: bash

  .
  ├── config
  │   ├── nginx <-The configuration for the nginx server used when running the
                  production environment. This is loaded into the nginx docker
                  container.
  │   │   └── conf.d
  │   └── ssh <- Loaded by the djangoapp docker container. Can contain the files
                 required by Plant IT to log into a cluster using ssh
                 public-key auth.

                 See :ref:`configuration-clusters-ssh-config` for details.
  ├── dev <- Docker container files and scripts for the development environment.
  │   ├── dockerfiles
  │   │   └── test_cluster
  │   └── server_scripts
  ├── django <- the django server root.
  │   ├── apis <- APIs for connecting Vue.js with back end python code.
  │   │   ├── auth
  │   │   ├── collection
  │   │   ├── file_manager
  │   │   ├── job_manager
  │   │   ├── __pycache__
  │   │   └── workflows
  │   ├── files <- Files generated / saved by Plant IT
  │   │   ├── public
  │   │   └── tmp
  │   ├── front_end <- Front-end Vue.js code
  │   │   ├── dist <- Django templates folder, contains index.html.
                      This folder is auto-generated by npm run build.
  │   │   ├── node_modules
  │   │   ├── public <- Contains the template that builds index.html
  │   │   └── src <- Front end source code.
  │   ├── plantit <- back end source code.
  │   │   ├── collection
  │   │   ├── file_manager
  │   │   ├── job_manager
  │   │   ├── migrations
  │   │   ├── __pycache__
  │   │   ├── static
  │   │   ├── user
  │   │   └── workflows
  │   ├── static <- Where static files are placed by ./manage.py collectstatic.
                    Auto-generated by collectstatic.
  │   ├── templates <- Django templates folder.
  │   │   └── registration <- Template used for /accounts/login page.
  │   └── workflows <- Where cookie cutter workflows should be placed.
  ├── dockerfiles <- Docker files to create images.
  │   └── djangoapp
  ├── docs <- This documentation
  │   └── source
  │       ├── _static
  │       └── _templates

Docker Containers
--------------------

Plant IT is run within docker containers. See the :ref:`configuration-docker`
Plant IT documentation for details.

Remote File System Support
--------------------------

Plant IT does not keep any of the sample files or workflow results files locally.

A user selects files to be included as samples on a registered file system
(See :ref:`configuration-filesystems`), links to the sample file path(s) are
kept in :class:`plantit.collection.models.Sample`.

The results files are uploaded back to the file system by the
`cluster side software <https://github.com/Computational-Plant-Science/DIRT2_ClusterSide>`_
and a link to the file is kept in :class:`plantit.collection.models.Sample`.
